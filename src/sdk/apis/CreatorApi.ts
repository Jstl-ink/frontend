/* tslint:disable */
/* eslint-disable */
/**
 * Jstl.ink API
 * Jstl.ink gives users the ability to easily create simple pages containing for  them relevant links and their social media profiles
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Link,
  Page,
} from '../models/index';
import {
    LinkFromJSON,
    LinkToJSON,
    PageFromJSON,
    PageToJSON,
} from '../models/index';

export interface CreateLinkByPageIdRequest {
    pageId: string;
}

export interface CreatePageRequest {
    body?: string;
}

export interface DeletePageByPageIdRequest {
    pageId: string;
}

export interface GetCreatorPageByIdRequest {
    pageId: string;
}

export interface LogoutUserRequest {
    pageId: string;
}

export interface UpdateLinkByPageIdRequest {
    pageId: string;
    link?: Link;
}

export interface UpdateSocialLinkByPageIdRequest {
    pageId: string;
    body?: Link;
}

/**
 * 
 */
export class CreatorApi extends runtime.BaseAPI {

    /**
     * Create new link on the user page
     */
    async createLinkByPageIdRaw(requestParameters: CreateLinkByPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters['pageId'] == null) {
            throw new runtime.RequiredError(
                'pageId',
                'Required parameter "pageId" was null or undefined when calling createLinkByPageId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/creator/{pageId}`.replace(`{${"pageId"}}`, encodeURIComponent(String(requestParameters['pageId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     * Create new link on the user page
     */
    async createLinkByPageId(requestParameters: CreateLinkByPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.createLinkByPageIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new user page
     */
    async createPageRaw(requestParameters: CreatePageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/creator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * Create new user page
     */
    async createPage(requestParameters: CreatePageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.createPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a user page
     */
    async deletePageByPageIdRaw(requestParameters: DeletePageByPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pageId'] == null) {
            throw new runtime.RequiredError(
                'pageId',
                'Required parameter "pageId" was null or undefined when calling deletePageByPageId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/creator/{pageId}`.replace(`{${"pageId"}}`, encodeURIComponent(String(requestParameters['pageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a user page
     */
    async deletePageByPageId(requestParameters: DeletePageByPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePageByPageIdRaw(requestParameters, initOverrides);
    }

    /**
     * Get the creator page
     */
    async getCreatorPageByIdRaw(requestParameters: GetCreatorPageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters['pageId'] == null) {
            throw new runtime.RequiredError(
                'pageId',
                'Required parameter "pageId" was null or undefined when calling getCreatorPageById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/creator/{pageId}`.replace(`{${"pageId"}}`, encodeURIComponent(String(requestParameters['pageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * Get the creator page
     */
    async getCreatorPageById(requestParameters: GetCreatorPageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.getCreatorPageByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout user from creator page
     */
    async logoutUserRaw(requestParameters: LogoutUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pageId'] == null) {
            throw new runtime.RequiredError(
                'pageId',
                'Required parameter "pageId" was null or undefined when calling logoutUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/creator/logout`.replace(`{${"pageId"}}`, encodeURIComponent(String(requestParameters['pageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout user from creator page
     */
    async logoutUser(requestParameters: LogoutUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutUserRaw(requestParameters, initOverrides);
    }

    /**
     * Update a link on user page
     */
    async updateLinkByPageIdRaw(requestParameters: UpdateLinkByPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters['pageId'] == null) {
            throw new runtime.RequiredError(
                'pageId',
                'Required parameter "pageId" was null or undefined when calling updateLinkByPageId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/creator/{pageId}`.replace(`{${"pageId"}}`, encodeURIComponent(String(requestParameters['pageId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LinkToJSON(requestParameters['link']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     * Update a link on user page
     */
    async updateLinkByPageId(requestParameters: UpdateLinkByPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.updateLinkByPageIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a social link on user page
     */
    async updateSocialLinkByPageIdRaw(requestParameters: UpdateSocialLinkByPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters['pageId'] == null) {
            throw new runtime.RequiredError(
                'pageId',
                'Required parameter "pageId" was null or undefined when calling updateSocialLinkByPageId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/creator/{pageId}`.replace(`{${"pageId"}}`, encodeURIComponent(String(requestParameters['pageId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     * Update a social link on user page
     */
    async updateSocialLinkByPageId(requestParameters: UpdateSocialLinkByPageIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.updateSocialLinkByPageIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
